// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`types: dist 1`] = `
Array [
  "index.cjs",
  "index.d.ts",
]
`;

exports[`types: dist/index.cjs 1`] = `
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  hello: () => hello
});

// src/hello.ts
function hello(name) {
  return \`Hello, \${name}\`;
}
__name(hello, "hello");
module.exports = __toCommonJS(src_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  hello
});

`;

exports[`types: dist/index.d.ts 1`] = `
declare function hello(name: string): string;

export { hello };

`;

exports[`types: logs 1`] = `
[STARTED] Resolving build manifests
[DATA] Checking 'action.yml'
[DATA] Checking 'package.json'
[SUCCESS] Resolving build manifests
[STARTED] Run preparations
[DATA] Removing 'dist' directory
[SUCCESS] Run preparations
[STARTED] Making bundle from 'package.json'
[STARTED] Parsing 'package.json'
[SUCCESS] Parsing 'package.json'
[STARTED] Making '.main' entry bundle
[DATA] Setting entry point: ./src/index
[DATA] Setting output file: ./dist/index.cjs
[SUCCESS] Making '.main' entry bundle
[STARTED] Making '.types' entry bundle
[DATA] Generating 'd.ts' files
[DATA] Bundle into single 'd.ts' file
[SUCCESS] Making '.types' entry bundle
[SUCCESS] Making bundle from 'package.json'
`;

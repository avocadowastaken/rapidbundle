// Vitest Snapshot v1

exports[`main-engines-node > dist 1`] = `
[
  "index.js",
]
`;

exports[`main-engines-node > dist/index.js 1`] = `
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  Foo: () => Foo
});
module.exports = __toCommonJS(src_exports);

// src/Foo.ts
var Foo = class {
  #bar;
  constructor(bar) {
    this.#bar = bar;
  }
};
__name(Foo, "Foo");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Foo
});

`;

exports[`main-engines-node > logs 1`] = `
✔ Resolving build manifests
  ─ ℹ Checking 'action.yml'
  ─ ℹ Checking 'package.json'
  ✔ Run preparations
  ─ ℹ Removing 'dist' directory
  ✔ Making bundle from 'package.json'
  › ✔ Parsing 'package.json'
    ─ ℹ Using '.engines.node' entry: 16.0.0
  › ✔ Making '.main' entry bundle
    ─ ℹ Setting entry point: src/index.ts
    ─ ℹ Setting output file: dist/index.js
------
Exit Code: 0
`;

// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`babel-test: dist 1`] = `
Array [
  "index.js",
]
`;

exports[`babel-test: dist/index.js 1`] = `
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  hello: () => hello,
  hi: () => hi
});
module.exports = __toCommonJS(src_exports);

// src/warning.ts
function warning(test, message) {
  if (!test)
    console.warn("[warn] %s", message);
}
__name(warning, "warning");

// src/hello.ts
function hello(name) {
  process.env.NODE_ENV === "production" ? warning(typeof name == "string", "'name' expected to be a string.") : void 0;
  return \`Hello, \${name}\`;
}
__name(hello, "hello");

// src/hi.ts
function hi(name) {
  warning(true, "'hi' is deprecated, use 'hello'");
  return hello(name);
}
__name(hi, "hi");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  hello,
  hi
});

`;

exports[`babel-test: logs 1`] = `
[STARTED] Resolving build manifests
[DATA] Checking 'action.yml'
[DATA] Checking 'package.json'
[SUCCESS] Resolving build manifests
[STARTED] Run preparations
[DATA] Removing 'dist' directory
[SUCCESS] Run preparations
[STARTED] Making bundle from 'package.json'
[STARTED] Parsing 'package.json'
[DATA] Using '.babel.test' entry.
[DATA] Using '.babel.plugins' entry.
[SUCCESS] Parsing 'package.json'
[STARTED] Making '.main' entry bundle
[DATA] Setting entry point: ./src/index.ts
[DATA] Setting output file: ./dist/index.js
[SUCCESS] Making '.main' entry bundle
[SUCCESS] Making bundle from 'package.json'
`;
